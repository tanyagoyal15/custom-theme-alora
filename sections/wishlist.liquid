{% schema %}
{
  "name": "Wishlist",
  "tag": "section",
  "class": "section",
  "settings": [],
  "presets": [
    {
      "name": "Wishlist"
    }
  ]
}
{% endschema %}

<script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'cart.js' | asset_url }}" defer="defer"></script>
<script>
  window.sectionId = '{{ section.id }}';
</script>

<style>
  .wishlist-wrapper {
    padding: 60px;
  }

  #wishlist-items {
    display: flex;
    flex-wrap: wrap;
    gap: 16px;
  }

  .wishlist-item {
    padding: 10px;
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    width: 250px; /* Set width */
    min-height: 400px; /* Ensures equal height */
    border: 1px solid #ddd;
  }

  .wishlist-item img {
    max-width: 100%;
    height: 300px; /* Prevents distortion */
    object-fit: cover;
  }

  .remove-icon {
    position: absolute;
    right: 20px;
    top: 10px;
  }

  .atc {
    font-size: 14px;
  }
</style>

<div class="wishlist-wrapper">
  <h1>My Wishlist</h1>
  <div id="wishlist-items"></div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    let wishlist = JSON.parse(localStorage.getItem('wishlist')) || [];
    let wishlistContainer = document.getElementById('wishlist-items');
    const sectionId = window.sectionId;

    if (wishlist.length === 0) {
      wishlistContainer.innerHTML = '<p>Your wishlist is empty.</p>';
    } else {
      wishlist.forEach((product) => {
        console.log('Product added in wishlist: ', product)
        wishlistContainer.innerHTML += `
          <a href="${product.url}" class="wishlist-item brdr-1 no-underline">
            <img src="${product.image}" width="100%">
            <h3 class="m-0 mt-24">${product.title}</h3>
            <p class="m-0 mt-16 cl-theme">${product.price}</p>
            <span class="remove-icon" onclick="removeFromWishlist('${product.variant_idd}', event)">x</span>
            <span id="product-form-${sectionId}" class="add-to-cart-btn atc mt-16 pointer font-medium" data-product-id="${product.id}" onclick='addToCartFromWishlist(${JSON.stringify(product).replace(/'/g, "&apos;")}, event)'>
              <span class="loading-spinner hidden">{%- render 'loading-spinner' -%}</span> 
              Add to Cart
            </span>
          </a>`;
        });
      }
    });

  function removeFromWishlist(id, e) {
    console.log("Remove from Wishlist Called")
    e.preventDefault();
    let wishlist = JSON.parse(localStorage.getItem('wishlist')) || [];
    wishlist = wishlist.filter((product) => product.variant_idd !== id);
    localStorage.setItem('wishlist', JSON.stringify(wishlist));
    //show loader here for 2 mins and then reload
    location.reload();
  }

  function addToCartFromWishlist(product, e) {
    e.preventDefault();
    console.log('Add to cart from wishlist called')
    if (typeof product === "string") {
      product = JSON.parse(product);
    }

    console.log('PRODUCT GOT FROM WISHLIST:', product);

    let button = event.currentTarget;
    let spinner = button.querySelector('.loading-spinner');

    button.classList.add('loading');
    spinner.classList.remove('hidden');

    const config = fetchConfig('javascript');
    config.headers['X-Requested-With'] = 'XMLHttpRequest';
    delete config.headers['Content-Type'];

    const formData = new FormData();

    formData.append('id', product.variant_idd);
    formData.append('product-id', product.product_id);
    formData.append('form_type', 'product');
    formData.append('utf8', 'âœ“');
    {% comment %} formData.append('options[Size]', 'XS'); {% endcomment %}
    {% comment %} formData.append('options[Color]', 'Beige'); {% endcomment %}
    {% comment %} formData.append('section-id', 'template--18697639100670__main'); {% endcomment %}
    config.body = formData;

    fetch(`${routes.cart_add_url}`, config)
    .then((response) => response.json())
    .then((response) => {
      publish(PUB_SUB_EVENTS.cartUpdate, {
        source: 'product-form',
        productVariantId: product.variant_idd,
        cartData: response,
      });
    })
    .then((response) => {
      console.log("Hello from then")
      this.removeFromWishlist(product.variant_idd, e)
    })
    .catch((e) => {
      console.error(e);
    })
    .finally(() => {
      // Hide loading spinner
      button.classList.remove('loading');
      spinner.classList.add('hidden');
    });
  }
</script>
