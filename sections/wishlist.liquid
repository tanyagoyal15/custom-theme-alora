{% schema %}
{
  "name": "Wishlist",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-7"
    }
  ],
  "presets": [
    {
      "name": "Wishlist"
    }
  ]
}
{% endschema %}

<script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'cart.js' | asset_url }}" defer="defer"></script>
<script>
  window.sectionId = '{{ section.id }}';
</script>

<style>
  .wishlist-wrapper {
    padding: 60px;
  }

  #wishlist-items {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 16px;
  }

  .wishlist-item {
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    min-width: 250px;
    min-height: 400px;
  }

  .wishlist-item img {
    max-width: 100%;
    object-fit: cover;
  }

  .remove-icon {
    position: absolute;
    right: 25px;
    top: 20px;
    border-radius: 50%;
    width: 4rem;
    height: 4rem;
    display: flex;
    justify-content: center;
    align-items: center;
    background: rgb(var(--color-background));
    color: rgb(var(--color-foreground));
    transform: scale(0);
    transition: transform 0.3s ease, all 0.3s ease;
  }

  .atc {
    font-size: 14px;
  }

  .wishlist-content {
    display: flex;
    {% comment %} justify-content: space-between; {% endcomment %}
    flex-direction: column;
    width: 100%;
    min-height: 120px;
  }

  .wishlist-contenrt > * {
    margin: 0;
  }

  .add-to-cart-btn {
    position: absolute;
    bottom: 120px;
    left: 50%;
    transform: translateX(-50%);
    background: rgb(var(--color-background));
    color: rgb(var(--color-foreground));
    {% comment %} border-radius: 20px; {% endcomment %}
    padding: 12px;
    font-size: 12px;
    font-weight: 500;
    cursor: pointer;
    opacity: 0;
    transition: all 0.4s ease-in-out;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-size: 14px;
    min-width: 250px !important;
    line-height: calc(1 + 0.2 / var(--font-body-scale));
    border: 1px solid rgb(var(--color-foreground)); !important;
    text-align: center;
    width: 90%;
    {% comment %} z-index: 1; {% endcomment %}
  }

  .wishlist-item:hover .add-to-cart-btn {
    opacity: 1;
    bottom: 140px;
  }

  .wishlist-item:hover .remove-icon {
    transform: scale(1.1);
  }

  @media screen and (max-width: 749px) {
    .wishlist-wrapper {
      padding: 24px;
    }

    #wishlist-items {
      grid-template-columns: 1fr;
    }

    .wishlist-content {
      min-height: 80px;
    }

    .add-to-cart-btn {
      bottom: 20px;
    }

    .wishlist-item:hover .add-to-cart-btn {
      opacity: 1;
      bottom: 100px;
    }
  }
</style>

<div class="wishlist-wrapper color-{{ section.settings.color_scheme }}">
  <h1>My Wishlist</h1>
  <div id="wishlist-items"></div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    let wishlist = JSON.parse(localStorage.getItem('wishlist')) || [];
    let wishlistContainer = document.getElementById('wishlist-items');
    const sectionId = window.sectionId;

    if (wishlist.length === 0) {
      wishlistContainer.innerHTML = '<p>Your wishlist is empty.</p>';
    } else {
      wishlist.forEach((product) => {
        wishlistContainer.innerHTML += `
          <a href="${product.url}" class="wishlist-item no-underline">
            <img src="${product.image}" width="100%" height="100%" loading="lazy">
            <div class="wishlist-content">
              <h3 class="m-0 mt-16">${product.title}</h3>
              <p class="m-0 mt-8 cl-theme">${product.price}</p>
              <div class="remove-icon" onclick="removeFromWishlist('${product.variant_idd}', event)">
                <img src="{{ 'icon-close.svg' | asset_url }}" alt="Close Icon" class="close-icon" width="10" height="10" loading="eager" />
              </div>
              <span id="product-form-${sectionId}" class="add-to-cart-btn atc mt-8 pointer font-medium" data-product-id="${product.id}" onclick='addToCartFromWishlist(${JSON.stringify(product).replace(/'/g, "&apos;")}, event)'>
                <span class="loading-spinner hidden">{%- render 'loading-spinner' -%}</span> 
                Add to Cart
              </span>
            </div>
          </a>`;
      });
    }
  });

  function removeFromWishlist(id, e) {
    e.preventDefault();
    let wishlist = JSON.parse(localStorage.getItem('wishlist')) || [];
    wishlist = wishlist.filter((product) => product.variant_idd !== id);
    localStorage.setItem('wishlist', JSON.stringify(wishlist));
    //show loader here for 2 mins and then reload
    location.reload();
  }

  function addToCartFromWishlist(product, e) {
    e.preventDefault();
    if (typeof product === "string") {
      product = JSON.parse(product);
    }

    let button = event.currentTarget;
    let spinner = button.querySelector('.loading-spinner');

    button.classList.add('loading');
    spinner.classList.remove('hidden');

    const config = fetchConfig('javascript');
    config.headers['X-Requested-With'] = 'XMLHttpRequest';
    delete config.headers['Content-Type'];

    const formData = new FormData();

    formData.append('id', product.variant_idd);
    formData.append('product-id', product.product_id);
    formData.append('form_type', 'product');
    formData.append('utf8', 'âœ“');
    {% comment %} formData.append('options[Size]', 'XS'); {% endcomment %}
    {% comment %} formData.append('options[Color]', 'Beige'); {% endcomment %}
    {% comment %} formData.append('section-id', 'template--18697639100670__main'); {% endcomment %}
    config.body = formData;

    fetch(`${routes.cart_add_url}`, config)
    .then((response) => response.json())
    .then((response) => {
      publish(PUB_SUB_EVENTS.cartUpdate, {
        source: 'product-form',
        productVariantId: product.variant_idd,
        cartData: response,
      });
    })
    .then((response) => {
      this.removeFromWishlist(product.variant_idd, e)
    })
    .catch((e) => {
      console.error(e);
    })
    .finally(() => {
      // Hide loading spinner
      button.classList.remove('loading');
      spinner.classList.add('hidden');
    });
  }
</script>
